// Code generated by MockGen. DO NOT EDIT.
// Source: translations.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	api "pokedex-clone/pkg/api"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTranslationsAPI is a mock of TranslationsAPI interface.
type MockTranslationsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTranslationsAPIMockRecorder
}

// MockTranslationsAPIMockRecorder is the mock recorder for MockTranslationsAPI.
type MockTranslationsAPIMockRecorder struct {
	mock *MockTranslationsAPI
}

// NewMockTranslationsAPI creates a new mock instance.
func NewMockTranslationsAPI(ctrl *gomock.Controller) *MockTranslationsAPI {
	mock := &MockTranslationsAPI{ctrl: ctrl}
	mock.recorder = &MockTranslationsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranslationsAPI) EXPECT() *MockTranslationsAPIMockRecorder {
	return m.recorder
}

// GetTranslation mocks base method.
func (m *MockTranslationsAPI) GetTranslation(ctx context.Context, name, text string, translationType api.TranslationType) (*api.TranslateAPIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranslation", ctx, name, text, translationType)
	ret0, _ := ret[0].(*api.TranslateAPIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranslation indicates an expected call of GetTranslation.
func (mr *MockTranslationsAPIMockRecorder) GetTranslation(ctx, name, text, translationType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranslation", reflect.TypeOf((*MockTranslationsAPI)(nil).GetTranslation), ctx, name, text, translationType)
}
