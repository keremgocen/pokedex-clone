name: dev
on:
  push:
    tags:
      - v*
    branches:
      - master
      - main
  pull_request:

# Cancel the workflow in progress in newer build is about to start.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  GO111MODULE: "on"
  RUN_BASE_COVERAGE: "on" # Runs test for PR base in case base test coverage is missing.
  TARGET_DELTA_COV: 90 # Target coverage of changed lines, in percents

jobs:
  context-dump:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: latest
  build:
    name: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.19"
      - name: Build
        run: go mod download && go build -a ./...
  test:
    name: Test
    needs: [build, lint]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.19"
      - name: Download
        run: go mod download
      - name: Build
        run: go build ./...
      - name: Go cache
        uses: actions/cache@v2
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-cache-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-cache
      - name: Restore base test coverage
        id: base-coverage
        if: github.event.pull_request.base.sha != ''
        uses: actions/cache@v2
        with:
          path: |
            unit-base.txt
          # Use base sha for PR or new commit hash for master/main push in test result key.
          key: ${{ runner.os }}-unit-test-coverage-${{ (github.event.pull_request.base.sha != github.event.after) && github.event.pull_request.base.sha || github.event.after }}
      - name: Run test for base code
        if: env.RUN_BASE_COVERAGE == 'on' && steps.base-coverage.outputs.cache-hit != 'true' && github.event.pull_request.base.sha != ''
        run: |
          git fetch origin main ${{ github.event.pull_request.base.sha }}
          HEAD=$(git rev-parse HEAD)
          git reset --hard ${{ github.event.pull_request.base.sha }}
          (make test-unit && go tool cover -func=./unit.coverprofile > unit-base.txt) || echo "No test-unit in base"
          git reset --hard $HEAD
      - name: Test
        id: test
        run: |
          make test-unit
          go tool cover -func=./unit.coverprofile > unit.txt
          TOTAL=$(grep 'total:' unit.txt)
          echo "${TOTAL}"
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
      - name: Annotate missing test coverage
        id: annotate
        if: github.event.pull_request.base.sha != ''
        run: |
          curl -sLO https://github.com/vearutop/gocovdiff/releases/download/v1.3.6/linux_amd64.tar.gz && tar xf linux_amd64.tar.gz
          gocovdiff_hash=$(git hash-object ./gocovdiff)
          [ "$gocovdiff_hash" == "8e507e0d671d4d6dfb3612309b72b163492f28eb" ] || (echo "::error::unexpected hash for gocovdiff, possible tampering: $gocovdiff_hash" && exit 1)
          git fetch origin main ${{ github.event.pull_request.base.sha }}
          REP=$(./gocovdiff -cov unit.coverprofile -gha-annotations gha-unit.txt -delta-cov-file delta-cov-unit.txt -target-delta-cov ${TARGET_DELTA_COV})
          echo "${REP}"
          cat gha-unit.txt
          DIFF=$(test -e unit-base.txt && ./gocovdiff -func-cov unit.txt -func-base-cov unit-base.txt || echo "Missing base coverage file")
          TOTAL=$(cat delta-cov-unit.txt)
          echo "rep<<EOF" >> $GITHUB_OUTPUT && echo "$REP" >> $GITHUB_OUTPUT && echo "EOF" >> $GITHUB_OUTPUT
          echo "diff<<EOF" >> $GITHUB_OUTPUT && echo "$DIFF" >> $GITHUB_OUTPUT && echo "EOF" >> $GITHUB_OUTPUT
          echo "total<<EOF" >> $GITHUB_OUTPUT && echo "$TOTAL" >> $GITHUB_OUTPUT && echo "EOF" >> $GITHUB_OUTPUT
      - name: Comment test coverage
        continue-on-error: true
        if: github.event.pull_request.base.sha != ''
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: unit-test
          message: |
            ### Unit Test Coverage
            ${{ steps.test.outputs.total }}
            ${{ steps.annotate.outputs.total }}
            <details><summary>Coverage of changed lines</summary>

            ${{ steps.annotate.outputs.rep }}
            </details>
            <details><summary>Coverage diff with base branch</summary>
            ${{ steps.annotate.outputs.diff }}

            </details>
      - name: Store base coverage
        if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
        run: cp unit.txt unit-base.txt
